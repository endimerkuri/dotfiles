# Created 2025-01-30 Thu 12:11
#+title: Emacs Configuration
#+author: Endi Merkuri

* Configuration
** Early Initialization
#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early Init -*- no-byte-compile: t; lexical-binding: t; -*-

  ;; Ensure Emacs loads the most recent byte-compiled files.
  (setq load-prefer-newer t)

  ;; Ensure JIT compilation is enabled for improved performance by
  ;; native-compiling loaded .elc files asynchronously
  (setq native-comp-jit-compilation t)

  (setq gc-cons-threshold 100000000)
  (setenv "LSP_USE_PLISTS" "true")
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq byte-compile-warnings '(not obsolete))
  (setq warning-suppress-log-types '((comp) (bytecomp)))
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; Silence stupid startup message
  (setq inhibit-startup-echo-area-message (user-login-name))

  ;; Default frame configuration: full screen, good-looking title bar on macOS
  (setq frame-resize-pixelwise t)
  (setq default-frame-alist '((fullscreen . maximized)
                              ;; Setting the face in here prevents flashes of
                              ;; color as the theme gets activated
                              (background-color . "#000000")
                              (foreground-color . "#ffffff")
                              (ns-appearance . dark)
                              (ns-transparent-titlebar . t)))
#+end_src

** Initialization
*** Package manager
#+begin_src emacs-lisp :tangle init.el
   ;;; init.el --- Init -*- no-byte-compile: t; lexical-binding: t; -*-

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (when (< emacs-major-version 29)
    (unless (package-installed-p 'use-package)
      (unless package-archive-contents
        (package-refresh-contents))
      (package-install 'use-package)))

  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x pgtk))
      (exec-path-from-shell-initialize)))
#+end_src

*** Compile .el files
#+begin_src emacs-lisp :tangle init.el
  (setq compile-angel-excluded-files-regexps '("^/usr/share/.*"))
  (use-package compile-angel
    :ensure t
    :demand t
    :config
    (setq compile-angel-verbose t)
    (compile-angel-on-load-mode)
    (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode))
#+end_src

*** Use "custom.el" file for custom variables added automatically
#+begin_src emacs-lisp :tangle init.el
  (setq mac-command-modifier 'meta)
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
  (setq use-package-verbose t)
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file :no-error-if-file-is-missing)
#+end_src

*** Do not display full line if line too long.
#+begin_src emacs-lisp :tangle init.el
  (set-default 'truncate-lines t)
#+end_src

*** Auto revert config?
#+begin_src emacs-lisp :tangle init.el
  (setopt display-time-default-load-average nil) ; this information is useless for most

  ;; Automatically reread from disk if the underlying file changes
  (setopt auto-revert-avoid-polling t)
  ;; Some systems don't do file notifications well; see
  ;; https://todo.sr.ht/~ashton314/emacs-bedrock/11
  (setopt auto-revert-interval 5)
  (setopt auto-revert-check-vc-info t)
  (global-auto-revert-mode)
  (setopt sentence-end-double-space nil)
#+end_src

*** Show line and column number in the modeline
#+begin_src emacs-lisp :tangle init.el
  (setopt line-number-mode t)                        ; Show current line in modeline
  (setopt column-number-mode t)                      ; Show column as well
#+end_src

*** Show line numbers and autoclose parenthesis in programming mode
#+begin_src emacs-lisp :tangle init.el
  ;; Display line numbers in programming mode
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (setopt display-line-numbers-width 3)           ; Set a minimum width
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (setopt x-underline-at-descent-line nil)           ; Prettier underlines
  (setopt switch-to-buffer-obey-display-actions t)   ; Make switching buffers more consistent

  ;; Nice line wrapping when working with text
  (add-hook 'text-mode-hook 'visual-line-mode)

  ;; Modes to highlight the current line with
  (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
    (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))
#+end_src

*** Steady cursor, smooth scrolling
#+begin_src emacs-lisp :tangle init.el
  (blink-cursor-mode -1)
  (pixel-scroll-precision-mode)
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (recentf-mode t)
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; https://www.emacswiki.org/emacs/SavePlace
  (save-place-mode 1)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  ;; change cursor width based on character
  ;; (setq x-stretch-cursor t)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (savehist-mode 1)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        backup-by-copying t
        frame-inhibit-implied-resize t
        read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t
        ediff-window-setup-function 'ediff-setup-windows-plain
        custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

*** Put all backup and autosaves file in Emacs directory
#+begin_src emacs-lisp :tangle init.el
  (unless backup-directory-alist
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))

  ;; auto-save files directory
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves" user-emacs-directory) t)))
#+end_src

*** Better terminal
#+begin_src emacs-lisp :tangle init.el
  (use-package vterm
    :ensure t
    :defer t
    :commands vterm
    :config
    ;; Speed up vterm
    (setq vterm-timer-delay 0.01))
#+end_src

*** Docker Controls
#+begin_src emacs-lisp :tangle init.el
  (use-package docker
    :ensure t
    :commands docker
    :config
    (setq docker-container-columns
          '((:name "Id" :width 16 :template "{{ json .ID }}" :sort nil :format nil)
            (:name "Names" :width 50 :template "{{ json .Names }}" :sort nil :format nil)
            (:name "Image" :width 15 :template "{{ json .Image }}" :sort nil :format nil)
            (:name "Created" :width 23 :template "{{ json .CreatedAt }}" :sort nil :format
                   (lambda
                     (x)
                     (format-time-string "%F %T"
                                         (date-to-time x))))
            (:name "Status" :width 20 :template "{{ json .Status }}" :sort nil :format nil))
          ))
#+end_src

*** Auto install and enable treesitter modes
#+begin_src emacs-lisp :tangle init.el
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

*** Auto delete region when starting to type
#+begin_src emacs-lisp :tangle init.el
  (use-package delsel
    :ensure nil ; no need to install it as it is built-in
    :hook (after-init . delete-selection-mode))
#+end_src

*** Completion plugins
#+begin_src emacs-lisp :tangle init.el
  (use-package vertico
    :ensure t
    :defer t
    :commands vertico-mode
    :hook (after-init . vertico-mode)
    :custom
    (vertico-cycle t)
    (vertico-resize nil))

  (use-package marginalia
    :ensure t
    :defer t
    :commands (marginalia-mode marginalia-cycle)
    :hook (after-init . marginalia-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides nil))

  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))

  (use-package corfu
    :ensure t
    :defer t
    :commands (corfu-mode global-corfu-mode)
    :hook ((prog-mode . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode))
    :bind (:map corfu-map ("<tab>" . corfu-complete))
    :custom
    ;; Hide commands in M-x which do not apply to the current mode.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Disable Ispell completion function. As an alternative try `cape-dict'.
    (text-mode-ispell-word-completion nil)
    (tab-always-indent 'complete)

    ;; Enable Corfu
    :config
    (global-corfu-mode))

  (use-package cape
    :ensure t
    :defer t
    :commands (cape-dabbrev cape-file cape-elisp-block)
    :bind ("C-c p" . cape-prefix-map)
    :init
    (add-hook 'completion-at-point-functions #'cape-file))
#+end_src

*** Dired and Trashed
#+begin_src emacs-lisp :tangle init.el
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))

  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))

  (use-package trashed
    :ensure t
    :commands (trashed)
    :config
    (setq trashed-action-confirmer 'y-or-n-p)
    (setq trashed-use-header-line t)
    (setq trashed-sort-key '("Date deleted" . t))
    (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src

*** Git
#+begin_src emacs-lisp :tangle init.el
  (use-package magit
    :ensure t
    :commands (magit-status magit-clone))
#+end_src

*** Lsp and snippets
#+begin_src emacs-lisp :tangle init.el
  (use-package eglot
    :ensure nil
    :defer t
    :commands (eglot
               eglot-rename
               eglot-ensure
               eglot-format-buffer)

    :custom
    (eglot-report-progress nil)  ; Prevent minibuffer spam

    :config
    ;; Optimizations
    (fset #'jsonrpc--log-event #'ignore)
    (setq jsonrpc-event-hook nil))

  (add-hook 'js-mode-hook #'eglot-ensure)
  (add-hook 'js-ts-mode-hook #'eglot-ensure)
  (add-hook 'go-mode-hook #'eglot-ensure)
  (add-hook 'go-ts-mode-hook #'eglot-ensure)
  (add-hook 'python-mode-hook #'eglot-ensure)
  (add-hook 'python-ts-mode-hook #'eglot-ensure)

  (use-package yasnippet
    :ensure t)
  (use-package yasnippet-snippets
    :ensure t)
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)

  (use-package format-all
    :ensure t
    :commands format-all-buffer)
#+end_src

*** Emacs lsp booster
Delete and install lsp mode again before enabling lsp booster.
Note: install lsp booster with =cargo install emacs-lsp-booster=
#+begin_src emacs-lisp :tangle init.el
  (use-package eglot-booster
    :after eglot
    :config	(eglot-booster-mode))
#+end_src

*** Automatically detect indent level
#+begin_src emacs-lisp :tangle init.el
  (use-package dtrt-indent
    :ensure t
    :config
    (setq dtrt-indent-min-quality 100)
    (setq dtrt-indent-hook-mapping-list
          (cons '(js-ts-mode javascript (js-indent-level standard-indent)) dtrt-indent-hook-mapping-list))
    :hook (after-init . dtrt-indent-global-mode))
#+end_src

*** Consult and embark
#+begin_src emacs-lisp :tangle init.el
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help))

  (use-package embark
    :ensure t
    :defer t
    :commands (embark-act
               embark-dwim
               embark-export
               embark-collect
               embark-bindings
               embark-prefix-help-command)
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Nerd icons
#+begin_src emacs-lisp :tangle init.el
  (use-package nerd-icons
    :ensure t)

  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Font
#+begin_src emacs-lisp :tangle init.el
  (defun efs/set-font-faces ()
    (let ((mono-spaced-font "Iosevka")
          (proportionately-spaced-font "Iosevka"))
      (set-face-attribute 'default nil :family mono-spaced-font :height 140)
      (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
      (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0)))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (efs/set-font-faces))))
    (efs/set-font-faces))
#+end_src

*** Modus theme config
#+begin_src emacs-lisp :tangle init.el
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t)
  (setq modus-themes-region '(bg-only no-extend))
  (setq modus-themes-headings
        '((1 . (rainbow overline background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.2))
          (t . (semilight 1.1))))

  (setq modus-themes-scale-headings t)
  (setq modus-themes-org-blocks 'tinted-background)

  (setq modus-themes-mode-line '(accented borderless 4))
  (load-theme 'modus-vivendi t)
#+end_src

*** Dotenv file support
#+begin_src emacs-lisp :tangle init.el
  (use-package dotenv-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode)))
#+end_src

*** Dashboard
#+begin_src emacs-lisp :tangle init.el
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    :custom
    (dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (dashboard-set-file-icons t)
    (dashboard-items '((recents   . 5)
                       (bookmarks . 5)
                       (projects  . 5)
                       (agenda    . 5)
                       (registers . 5)))
    (dashboard-startupify-list '(dashboard-insert-banner
                                 dashboard-insert-newline
                                 dashboard-insert-banner-title
                                 dashboard-insert-newline
                                 dashboard-insert-navigator
                                 dashboard-insert-newline
                                 dashboard-insert-init-info
                                 dashboard-insert-items
                                 dashboard-insert-newline))
    (dashboard-startup-banner 'logo)
    ;; Content is not centered by default. To center, set
    (dashboard-center-content t)
    ;; vertically center content
    (dashboard-vertically-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+end_src

*** Copilot plugin
#+begin_src emacs-lisp :tangle init.el
  (use-package copilot
    :ensure t
    :commands (copilot-mode))
#+end_src

*** More treesitter highlighting
#+begin_src emacs-lisp :tangle init.el
  (setq treesit-font-lock-level 4)
#+end_src

*** Modeline
#+begin_src emacs-lisp :tangle init.el
  (defun my-modeline--major-mode-name ()
    "Return capitalized `major-mode' as a string."
    (format "%18s" (capitalize (replace-regexp-in-string "-ts" "" (replace-regexp-in-string "-mode" "" (symbol-name major-mode))))))

  (defvar-local my-modeline-major-mode
      '(:eval
        (propertize (my-modeline--major-mode-name) 'face 'bold))
    "Mode line construct to display the major mode.")

  (put 'my-modeline-major-mode 'risky-local-variable t)

  (defun mode-line-fill (reserve)
    "Return empty space using FACE and leaving RESERVE space on the right."
    (when
        (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
                'display
                `((space :align-to (- (+ right right-fringe right-margin) ,reserve)))))

  (setq-default mode-line-format
                (list '("%e" mode-line-front-space
                        (:propertize "[%*] " display (min-width ...))
                        (:eval (propertize "%b" 'face 'bold))  "   " "L%l" "   " "%o" "  "
                        (vc-mode vc-mode) "  "  mode-line-misc-info)
                      (mode-line-fill 20) my-modeline-major-mode))
#+end_src

*** Treesitter based movement/selection
#+begin_src emacs-lisp :tangle init.el
  (use-package combobulate
    :custom
    (combobulate-key-prefix "C-c o")
    :config
    (setq combobulate-flash-node nil)
    :hook (
           (go-ts-mode . combobulate-mode)
           (js-ts-mode . combobulate-mode))
    :load-path ("elpa/combobulate"))
#+end_src

*** Which key
#+begin_src emacs-lisp :tangle init.el
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

*** Git highlights
#+begin_src emacs-lisp :tangle init.el
  (use-package diff-hl
    :ensure t)
  (global-diff-hl-mode)
#+end_src

*** Rest requests
#+begin_src emacs-lisp :tangle init.el
  (use-package verb
    :ensure t
    :after org
    :defer t)

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src

*** Misc
#+begin_src emacs-lisp :tangle init.el
  (add-to-list 'auto-mode-alist '("\.[cm]js" . js-mode))

  (add-hook 'js-mode-hook
            (lambda() (local-unset-key (kbd "M-."))))
  (add-hook 'js-ts-mode-hook
            (lambda() (local-unset-key (kbd "M-."))))
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
